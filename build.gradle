import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    // define dependency versions for this project
    ext.deps = [
            eventbus    : '3.0.0',
            kotlin      : '1.5.21',
            timber      : '4.7.1',
            weakDelegate: '1.0.1'
    ]
    ext.deps.androidX = [
            annotation           : '1.2.0',
            appCompat            : '1.3.0',
            fragment             : '1.3.5',
            lifecycle            : '2.3.1',
            loader               : '1.1.0',
            localBroadcastManager: '1.0.0',
    ]

    repositories {
        google()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${deps.kotlin}"
    }
}
plugins {
    id 'org.jlleitschuh.gradle.ktlint' version '10.1.0'
}

subprojects {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'

    group 'me.thekey.android'
    version = '4.0.3-SNAPSHOT'

    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
    }

    beforeEvaluate {
        android {
            compileSdkVersion 28

            defaultConfig {
                minSdkVersion 14
                targetSdkVersion 28
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            dexOptions {
                preDexLibraries !project.hasProperty('disablePreDex')
            }
            kotlinOptions {
                jvmTarget = JavaVersion.VERSION_1_8.toString()
                freeCompilerArgs += '-Xjvm-default=enable'
            }
        }

        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:${deps.kotlin}"

            compileOnly "androidx.annotation:annotation:${deps.androidX.annotation}"
            compileOnly "org.jetbrains:annotations:21.0.1"
        }
    }

    configurations.all {
        resolutionStrategy {
            force "androidx.annotation:annotation:${deps.androidX.annotation}"
            force 'org.jetbrains:annotations:20.1.0'

            dependencySubstitution {
                substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk7') with module("org.jetbrains.kotlin:kotlin-stdlib:${deps.kotlin}")
                substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') with module("org.jetbrains.kotlin:kotlin-stdlib:${deps.kotlin}")
            }
        }
    }

    // configure checkstyle
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '7.8.2'
    }
    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('config/checkstyle/checkstyle.xml')
        source 'src'
        include '*/java/**/*.java'
        ignoreFailures false
        showViolations true

        classpath = files()
    }
    afterEvaluate {
        if (project.tasks.findByName('check')) {
            check.dependsOn('checkstyle')
        }
    }

    // configure ktlint
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    ktlint {
        android = true
        reporters {
            reporter(ReporterType.PLAIN_GROUP_BY_FILE)
            reporter(ReporterType.CHECKSTYLE)
        }
    }

    // configure publishing
    apply plugin: 'maven-publish'
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
    }
    afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) {
                    from components.release

                    pom.withXml {
                        def scm = asNode().appendNode('scm')
                        scm.appendNode('connection', POM_SCM_CONNECTION)
                        scm.appendNode('developerConnection', POM_SCM_CONNECTION)
                    }

                    artifact sourcesJar {
                        classifier 'sources'
                    }
                }
            }
            repositories {
                maven {
                    if (project.version.endsWith('-SNAPSHOT')) {
                        url "https://cruglobal.jfrog.io/cruglobal/list/maven-cru-android-public-snapshots-local/"
                    } else {
                        url "https://cruglobal.jfrog.io/cruglobal/list/maven-cru-android-public-releases-local/"
                    }

                    credentials {
                        username cruGlobalMavenRepositoryUsername
                        password cruGlobalMavenRepositoryPassword
                    }
                }
            }
        }
    }
}
